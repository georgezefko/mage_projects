import os
import random
import time

from quixstreams import Application


class TemperatureEventGenerator:
    """
    Generates temperature readings for three different machines.

    Machine ID's 0, 1 are functioning normally, 2 is malfunctioning.
    """

    # Probabilities are % chance for [-1, 0, 1] change given a current temp in the
    # 40's, 50's, etc.
    probabilities_normal = {
        40: [0, 0, 100],
        50: [20, 30, 50],
        60: [30, 40, 30],
        70: [40, 50, 10],
        80: [80, 10, 10],
        90: [100, 0, 0],
    }

    probabilities_issue = {
        40: [0, 0, 100],
        50: [0, 10, 90],
        60: [5, 15, 80],
        70: [5, 20, 75],
        80: [5, 20, 75],
        90: [10, 20, 70],
    }

    def __init__(self):
        self.stop = False
        self.event_count = 0
        self.machine_temps = {0: 66, 1: 58, 2: 62}
        self.machine_types = {
            0: self.probabilities_normal,
            1: self.probabilities_normal,
            2: self.probabilities_issue,
        }

    def update_machine_temp(self, machine_id):
        """
        Updates the temperature for a machine by -1, 0, or 1 based on its current temp.
        """
        self.machine_temps[machine_id] += random.choices(
            [-1, 0, 1],
            self.machine_types[machine_id][(self.machine_temps[machine_id] // 10) * 10],
        )[0]

    def generate_event(self):
        """
        Generate a temperature reading event for a Machine ID.

        It tracks/loops through the Machine ID's for equal number of readings.
        """
        if self.stop:
            return None

        machine_id = self.event_count % 3
        self.update_machine_temp(machine_id)
        event_out = {
            "key": str(machine_id),
            "value": {
                "Temperature_C": self.machine_temps[machine_id],
                "Timestamp": time.time_ns(),
            },
        }
        self.event_count += 1
        if self.machine_temps[machine_id] == 100:
            self.stop = True
        return event_out


_app = Application(broker_address=os.environ.get("BROKER_ADDRESS", "localhost:9092"))
topic = _app.topic(name="temperature_readings")
event_generator = TemperatureEventGenerator()

if __name__ == "__main__":
    with _app.get_producer() as producer:
        while event := event_generator.generate_event():
            event = topic.serialize(**event)
            print(f"producing event for MID {event.key}, {event.value}")
            producer.produce(key=event.key, value=event.value, topic=topic.name)
            time.sleep(0.2)  # just to make things easier to follow along
        print("An alert should have been generated by now; stopping producing.")
